let startTime = Date.now()
let fs = require('fs')
//prime helper function
const isPrime = num => {
    for (let i = 2; i <= Math.sqrt(num); i++)
        if (num % i === 0) return false;
    return num !== 1 && num !== 0;
}

//--------------------------------------------------------------------------------
// Problem 11
// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
//What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
let gridText = fs.readFileSync("./data/problem11.txt").toString().split("\r\n")
let grid = []
let size = 4
for (let x of gridText)
    grid.push(x.split(" "))
grid.map(y => y.map(x => parseInt(x)))
let largest = 0
let maps = []
//horizontal 
//[[1,1,1,1]]
let map = []
for (let i = 0; i < 1; i++) {
    map[i] = []
    for (let j = 0; j < size; j++) {
        map[i][j] = 1
    }
}
maps.push(map)
//vertical
//[[1],
// [1],
// [1],
// [1] ]
map = []
for (let i = 0; i < size; i++) {
    map[i] = []
    for (let j = 0; j < 1; j++) {
        map[i][j] = 1
    }
}
maps.push(map)
//diagonal topleft - bottom right//vertical
//[[1,0,0,0],
// [0,1,0,0],
// [0,0,1,0],
// [0,0,0,1] ]
map = []
for (let i = 0; i < size; i++) {
    map[i] = []
    for (let j = 0; j < size; j++) {
        map[i][j] = 0
        if (i == j) map[i][j] = 1
    }
}
maps.push(map)
//diagonal topright - bottomleft
//[[0,0,0,1],
// [0,0,1,0],
// [0,1,0,0],
// [1,0,0,0] ]
maps.push(map.slice().reverse())

for (map of maps) {
    for (let y = 0; y <= grid.length - map.length; y++) {
        for (let x = 0; x <= grid[0].length - map[0].length; x++) {
            let prod = 1
            for (let i = 0; i < map.length; i++) {
                for (let j = 0; j < map[0].length; j++) {
                    if (map[i][j]) {
                        prod *= grid[y + i][x + j]
                    }
                }
            }
            if (largest < prod)
                largest = prod
        }
    }
}
console.log("11: " + largest)
//--------------------------------------------------------------------------------
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:

//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//      10: 1,2,5,10
//      15: 1,3,5,15
//      21: 1,3,7,21
//      28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

let isTnumber = x => {
    let a = Math.round(Math.sqrt(2 * x))
    return (0.5 * a * (a + 1)) == x
}
let countDivs = x => {
    let divCount = 0
    for (let i = 2; i < Math.sqrt(x) + 1; i++) {
        if (x % i == 0) {
            divCount++
            if (i != (x / i))
                divCount++
        }
    }
    return divCount
}
let calcTnumber = x => isTnumber(x) ? Math.round(Math.sqrt(2 * x)) : 0

let value = Math.pow(2, 4) * Math.pow(3, 4) * Math.pow(5, 4) * 7 * 11
while (!isTnumber(value)) {
    value++
}
let n = calcTnumber(value)
while (countDivs(value) <= 500) {
    value += n + 1
    n++
}

console.log("12: " + value)

//--------------------------------------------------------------------------------
// Problem 13
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

let numbers = fs.readFileSync("./data/problem13.txt").toString().split("\r\n")
let number = numbers.map(x => parseInt(x)).reduce((a, b) => a + b)
console.log("13: " + number.toPrecision(10))
//--------------------------------------------------------------------------------
// Problem 14
// The following iterative sequence is defined for the set of positive integers:
//      n → n/2 (n is even)
//      n → 3n + 1 (n is odd)
// Using the rule above and starting with 13, we generate the following sequence:
//      13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
// Which starting number, under one million, produces the longest chain?

let chainLenght = x => {
    let c = 1
    while (x > 1) {
        if (x % 2 == 0)
            x = x / 2
        else
            x = 3 * x + 1
        c++
    }
    return c
}
largest = {
    chain: 0,
    i: 0
}
for (let i = 500001; i < 1000000; i += 2) {
    let chain = chainLenght(i)
    if (chain > largest.chain)
        largest = {
            chain: chain,
            i: i
        }
}
console.log("14: " + largest.i)
//--------------------------------------------------------------------------------
// Problem 15
// Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, 
// there are exactly 6 routes to the bottom right corner.
// How many such routes are there through a 20×20 grid?

//bad method
size = 20
let count = 0
let maxNumber = Math.pow(2, size * 2) - 1
let low = Math.floor(maxNumber / Math.pow(2, size)) // 1048575 (0000000000000000000011111111111111111111)
let high = maxNumber - low // 1099510579200    (1111111111111111111100000000000000000000)
for (let i = low; i <= high; i++) {
    let binString = i.toString(2)
    while (binString.length < size * 2) {
        binString = "0" + binString
    }
    if (binString.split("").filter(x => x === "1").length == size) {
        count++
    }
}
console.log(count)
//}//--------------------------------------------------------------------------------
//time calculation
let epoch = Date.now() - startTime
console.log("epoch: " + epoch / 1000 + "s")
